upstream app {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response
  server unix:///home/{{ user }}/shared/tmp/sockets/unicorn.sock fail_timeout=0;
}

# the server directive is nginx's virtual host directive.
server {
  # port to listen on. Can also be set to an IP:PORT.
  listen 80;

  # sets the domains that this vhost server requests for
  # server_name telegram.varlamov.ru;

  # ~2 seconds is often enough for most folks to parse HTML/CSS and
  # retrieve needed images/icons/frames, connections are cheap in
  # nginx so increasing this is generally safe
  keepalive_timeout 5;

  # doc root
  root /home/{{ user }}/current/public;

  # vhost specific access log
  access_log /home/{{ user }}/shared/log/access.log;

  # vhost specific error log
  error_log /home/{{ user }}/shared/log/error.log;

  client_max_body_size 100M;

  # this rewrites all the requests to the maintenance.html
  # page if it exists in the doc root. This is for capistrano's
  # disable web task
  if (-f $document_root/system/maintenance.html) {
    rewrite  ^(.*)$  /system/maintenance.html last;
    break;
  }

  location / {
    #auth_basic "Restricted area";
    #auth_basic_user_file /etc/nginx/htpasswd;

    # an HTTP header important enough to have its own Wikipedia entry:
    # http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if and only if you use HTTPS, this helps Rack
    # set the proper protocol for doing redirects:
    # proxy_set_header X-Forwarded-Proto https;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    # set "proxy_buffering off" *only* for Rainbows! when doing
    # Comet/long-poll stuff.  It's also safe to set if you're
    # using only serving fast clients with Unicorn + nginx.
    # Otherwise you _want_ nginx to buffer responses to slow
    # clients, really.
    # proxy_buffering off;

    # Try to serve static files from nginx, no point in making an
    # *application* server like Unicorn/Rainbows! serve static files.
    if (!-f $request_filename) {
      proxy_pass http://app;
      break;
    }
  }

  location ~ ^/assets/ {
      gzip_static on;
      expires max;
      add_header Cache-Control public;
      add_header Last-Modified "";
      add_header ETag "";
      break;
  }

  # Rails error pages
  error_page 500 502 503 504 /500.html;
  error_page 404 /404.html;
  error_page 422 /422.html;

  location ~ \.(cgi|fcgi|rb)$  { deny all; }
  location ~ /\.ht             { deny all; }
  location ~ /\.git            { deny all; }
}
